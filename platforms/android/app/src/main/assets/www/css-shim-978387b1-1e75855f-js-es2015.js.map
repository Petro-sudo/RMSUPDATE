{"version":3,"sources":["./node_modules/@ionic/core/dist/esm/css-shim-978387b1-1e75855f.js"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA,iBAAiB,IAAI;AACrB;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,OAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,wBAAwB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA,kCAAkC,IAAI;AACtC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,oBAAoB;AACpB;AACA;AACA;AACA,qBAAqB,GAAG;AACxB,wBAAwB,KAAK,WAAW,SAAS,QAAQ;AACzD,uBAAuB,KAAK,WAAW,SAAS,IAAI,GAAG,IAAI,KAAK;AAChE,iCAAiC,aAAa;AAC9C,kBAAkB,QAAQ,WAAW,SAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,oBAAoB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,+CAA+C,EAAE;AAChI;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,oBAAoB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,mBAAmB,QAAQ;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA;AACA,iCAAiC,uCAAuC,EAAE;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,GAAG,0EAA0E,OAAO,IAAI,KAAK,QAAQ,GAAG;AACxI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,uBAAuB,EAAE;AAChE;AACA,2CAA2C,uBAAuB,EAAE;AACpE;AACA;AACA;AACA;AACA,kEAAkE,2CAA2C,EAAE;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,gCAAgC,EAAE;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,6CAA6C,SAAS,+DAA+D;AACrH,KAAK;AACL,yCAAyC,WAAW;AACpD;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,qCAAqC,kBAAkB;AACvD;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,4CAA4C,EAAE;AAC7E;AACA;AACA;AACA;AACA,2CAA2C,mBAAmB,EAAE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA,WAAW,0BAA0B;AACrC;AACA;AACA;AACA,qBAAqB,4BAA4B;AACjD;AACA;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,kBAAkB,EAAE;AACtG,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA","file":"css-shim-978387b1-1e75855f-js-es2015.js","sourcesContent":["/*\r\nExtremely simple css parser. Intended to be not more than what we need\r\nand definitely not necessarily correct =).\r\n*/\r\n/** @unrestricted */\r\nvar StyleNode = /** @class */ (function () {\r\n    function StyleNode() {\r\n        this.start = 0;\r\n        this.end = 0;\r\n        this.previous = null;\r\n        this.parent = null;\r\n        this.rules = null;\r\n        this.parsedCssText = '';\r\n        this.cssText = '';\r\n        this.atRule = false;\r\n        this.type = 0;\r\n        this.keyframesName = '';\r\n        this.selector = '';\r\n        this.parsedSelector = '';\r\n    }\r\n    return StyleNode;\r\n}());\r\n// given a string of css, return a simple rule tree\r\n/**\r\n * @param {string} text\r\n * @return {StyleNode}\r\n */\r\nfunction parse(text) {\r\n    text = clean(text);\r\n    return parseCss(lex(text), text);\r\n}\r\n// remove stuff we don't care about that may hinder parsing\r\n/**\r\n * @param {string} cssText\r\n * @return {string}\r\n */\r\nfunction clean(cssText) {\r\n    return cssText.replace(RX.comments, '').replace(RX.port, '');\r\n}\r\n// super simple {...} lexer that returns a node tree\r\n/**\r\n * @param {string} text\r\n * @return {StyleNode}\r\n */\r\nfunction lex(text) {\r\n    var root = new StyleNode();\r\n    root['start'] = 0;\r\n    root['end'] = text.length;\r\n    var n = root;\r\n    for (var i = 0, l = text.length; i < l; i++) {\r\n        if (text[i] === OPEN_BRACE) {\r\n            if (!n['rules']) {\r\n                n['rules'] = [];\r\n            }\r\n            var p = n;\r\n            var previous = p['rules'][p['rules'].length - 1] || null;\r\n            n = new StyleNode();\r\n            n['start'] = i + 1;\r\n            n['parent'] = p;\r\n            n['previous'] = previous;\r\n            p['rules'].push(n);\r\n        }\r\n        else if (text[i] === CLOSE_BRACE) {\r\n            n['end'] = i + 1;\r\n            n = n['parent'] || root;\r\n        }\r\n    }\r\n    return root;\r\n}\r\n// add selectors/cssText to node tree\r\n/**\r\n * @param {StyleNode} node\r\n * @param {string} text\r\n * @return {StyleNode}\r\n */\r\nfunction parseCss(node, text) {\r\n    var t = text.substring(node['start'], node['end'] - 1);\r\n    node['parsedCssText'] = node['cssText'] = t.trim();\r\n    if (node.parent) {\r\n        var ss = node.previous ? node.previous['end'] : node.parent['start'];\r\n        t = text.substring(ss, node['start'] - 1);\r\n        t = _expandUnicodeEscapes(t);\r\n        t = t.replace(RX.multipleSpaces, ' ');\r\n        // TODO(sorvell): ad hoc; make selector include only after last ;\r\n        // helps with mixin syntax\r\n        t = t.substring(t.lastIndexOf(';') + 1);\r\n        var s = node['parsedSelector'] = node['selector'] = t.trim();\r\n        node['atRule'] = (s.indexOf(AT_START) === 0);\r\n        // note, support a subset of rule types...\r\n        if (node['atRule']) {\r\n            if (s.indexOf(MEDIA_START) === 0) {\r\n                node['type'] = types.MEDIA_RULE;\r\n            }\r\n            else if (s.match(RX.keyframesRule)) {\r\n                node['type'] = types.KEYFRAMES_RULE;\r\n                node['keyframesName'] = node['selector'].split(RX.multipleSpaces).pop();\r\n            }\r\n        }\r\n        else {\r\n            if (s.indexOf(VAR_START) === 0) {\r\n                node['type'] = types.MIXIN_RULE;\r\n            }\r\n            else {\r\n                node['type'] = types.STYLE_RULE;\r\n            }\r\n        }\r\n    }\r\n    var r$ = node['rules'];\r\n    if (r$) {\r\n        for (var i = 0, l = r$.length, r = void 0; (i < l) && (r = r$[i]); i++) {\r\n            parseCss(r, text);\r\n        }\r\n    }\r\n    return node;\r\n}\r\n/**\r\n * conversion of sort unicode escapes with spaces like `\\33 ` (and longer) into\r\n * expanded form that doesn't require trailing space `\\000033`\r\n * @param {string} s\r\n * @return {string}\r\n */\r\nfunction _expandUnicodeEscapes(s) {\r\n    return s.replace(/\\\\([0-9a-f]{1,6})\\s/gi, function () {\r\n        var code = arguments[1], repeat = 6 - code.length;\r\n        while (repeat--) {\r\n            code = '0' + code;\r\n        }\r\n        return '\\\\' + code;\r\n    });\r\n}\r\n/** @enum {number} */\r\nvar types = {\r\n    STYLE_RULE: 1,\r\n    KEYFRAMES_RULE: 7,\r\n    MEDIA_RULE: 4,\r\n    MIXIN_RULE: 1000\r\n};\r\nvar OPEN_BRACE = '{';\r\nvar CLOSE_BRACE = '}';\r\n// helper regexp's\r\nvar RX = {\r\n    comments: /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,\r\n    port: /@import[^;]*;/gim,\r\n    customProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,\r\n    mixinProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,\r\n    mixinApply: /@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,\r\n    varApply: /[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,\r\n    keyframesRule: /^@[^\\s]*keyframes/,\r\n    multipleSpaces: /\\s+/g\r\n};\r\nvar VAR_START = '--';\r\nvar MEDIA_START = '@media';\r\nvar AT_START = '@';\r\nfunction findRegex(regex, cssText, offset) {\r\n    regex['lastIndex'] = 0;\r\n    var r = cssText.substring(offset).match(regex);\r\n    if (r) {\r\n        var start = offset + r['index'];\r\n        return {\r\n            start: start,\r\n            end: start + r[0].length\r\n        };\r\n    }\r\n    return null;\r\n}\r\nvar VAR_USAGE_START = /\\bvar\\(/;\r\nvar VAR_ASSIGN_START = /\\B--[\\w-]+\\s*:/;\r\nvar COMMENTS = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim;\r\nvar TRAILING_LINES = /^[\\t ]+\\n/gm;\r\nfunction resolveVar(props, prop, fallback) {\r\n    if (props[prop]) {\r\n        return props[prop];\r\n    }\r\n    if (fallback) {\r\n        return executeTemplate(fallback, props);\r\n    }\r\n    return '';\r\n}\r\nfunction findVarEndIndex(cssText, offset) {\r\n    var count = 0;\r\n    var i = offset;\r\n    for (; i < cssText.length; i++) {\r\n        var c = cssText[i];\r\n        if (c === '(') {\r\n            count++;\r\n        }\r\n        else if (c === ')') {\r\n            count--;\r\n            if (count <= 0) {\r\n                return i + 1;\r\n            }\r\n        }\r\n    }\r\n    return i;\r\n}\r\nfunction parseVar(cssText, offset) {\r\n    var varPos = findRegex(VAR_USAGE_START, cssText, offset);\r\n    if (!varPos) {\r\n        return null;\r\n    }\r\n    var endVar = findVarEndIndex(cssText, varPos.start);\r\n    var varContent = cssText.substring(varPos.end, endVar - 1);\r\n    var _a = varContent.split(','), propName = _a[0], fallback = _a.slice(1);\r\n    return {\r\n        start: varPos.start,\r\n        end: endVar,\r\n        propName: propName.trim(),\r\n        fallback: fallback.length > 0 ? fallback.join(',').trim() : undefined\r\n    };\r\n}\r\nfunction compileVar(cssText, template, offset) {\r\n    var varMeta = parseVar(cssText, offset);\r\n    if (!varMeta) {\r\n        template.push(cssText.substring(offset, cssText.length));\r\n        return cssText.length;\r\n    }\r\n    var propName = varMeta.propName;\r\n    var fallback = varMeta.fallback != null ? compileTemplate(varMeta.fallback) : undefined;\r\n    template.push(cssText.substring(offset, varMeta.start), function (params) { return resolveVar(params, propName, fallback); });\r\n    return varMeta.end;\r\n}\r\nfunction executeTemplate(template, props) {\r\n    var final = '';\r\n    for (var i = 0; i < template.length; i++) {\r\n        var s = template[i];\r\n        final += (typeof s === 'string')\r\n            ? s\r\n            : s(props);\r\n    }\r\n    return final;\r\n}\r\nfunction findEndValue(cssText, offset) {\r\n    var onStr = false;\r\n    var double = false;\r\n    var i = offset;\r\n    for (; i < cssText.length; i++) {\r\n        var c = cssText[i];\r\n        if (onStr) {\r\n            if (double && c === '\"') {\r\n                onStr = false;\r\n            }\r\n            if (!double && c === '\\'') {\r\n                onStr = false;\r\n            }\r\n        }\r\n        else {\r\n            if (c === '\"') {\r\n                onStr = true;\r\n                double = true;\r\n            }\r\n            else if (c === '\\'') {\r\n                onStr = true;\r\n                double = false;\r\n            }\r\n            else if (c === ';') {\r\n                return i + 1;\r\n            }\r\n            else if (c === '}') {\r\n                return i;\r\n            }\r\n        }\r\n    }\r\n    return i;\r\n}\r\nfunction removeCustomAssigns(cssText) {\r\n    var final = '';\r\n    var offset = 0;\r\n    while (true) {\r\n        var assignPos = findRegex(VAR_ASSIGN_START, cssText, offset);\r\n        var start = assignPos ? assignPos.start : cssText.length;\r\n        final += cssText.substring(offset, start);\r\n        if (assignPos) {\r\n            offset = findEndValue(cssText, start);\r\n        }\r\n        else {\r\n            break;\r\n        }\r\n    }\r\n    return final;\r\n}\r\nfunction compileTemplate(cssText) {\r\n    var index = 0;\r\n    cssText = cssText.replace(COMMENTS, '');\r\n    cssText = removeCustomAssigns(cssText)\r\n        .replace(TRAILING_LINES, '');\r\n    var segments = [];\r\n    while (index < cssText.length) {\r\n        index = compileVar(cssText, segments, index);\r\n    }\r\n    return segments;\r\n}\r\nfunction resolveValues(selectors) {\r\n    var props = {};\r\n    selectors.forEach(function (selector) {\r\n        selector.declarations.forEach(function (dec) {\r\n            props[dec.prop] = dec.value;\r\n        });\r\n    });\r\n    var propsValues = {};\r\n    var entries = Object.entries(props);\r\n    var _loop_1 = function (i) {\r\n        var dirty = false;\r\n        entries.forEach(function (_a) {\r\n            var key = _a[0], value = _a[1];\r\n            var propValue = executeTemplate(value, propsValues);\r\n            if (propValue !== propsValues[key]) {\r\n                propsValues[key] = propValue;\r\n                dirty = true;\r\n            }\r\n        });\r\n        if (!dirty) {\r\n            return \"break\";\r\n        }\r\n    };\r\n    for (var i = 0; i < 10; i++) {\r\n        var state_1 = _loop_1();\r\n        if (state_1 === \"break\")\r\n            break;\r\n    }\r\n    return propsValues;\r\n}\r\nfunction getSelectors(root, index) {\r\n    if (index === void 0) { index = 0; }\r\n    if (!root.rules) {\r\n        return [];\r\n    }\r\n    var selectors = [];\r\n    root.rules\r\n        .filter(function (rule) { return rule.type === types.STYLE_RULE; })\r\n        .forEach(function (rule) {\r\n        var declarations = getDeclarations(rule.cssText);\r\n        if (declarations.length > 0) {\r\n            rule.parsedSelector.split(',').forEach(function (selector) {\r\n                selector = selector.trim();\r\n                selectors.push({\r\n                    selector: selector,\r\n                    declarations: declarations,\r\n                    specificity: computeSpecificity(),\r\n                    nu: index\r\n                });\r\n            });\r\n        }\r\n        index++;\r\n    });\r\n    return selectors;\r\n}\r\nfunction computeSpecificity(_selector) {\r\n    return 1;\r\n}\r\nvar IMPORTANT = '!important';\r\nvar FIND_DECLARATIONS = /(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};{])+)|\\{([^}]*)\\}(?:(?=[;\\s}])|$))/gm;\r\nfunction getDeclarations(cssText) {\r\n    var declarations = [];\r\n    var xArray;\r\n    while (xArray = FIND_DECLARATIONS.exec(cssText.trim())) {\r\n        var _a = normalizeValue(xArray[2]), value = _a.value, important = _a.important;\r\n        declarations.push({\r\n            prop: xArray[1].trim(),\r\n            value: compileTemplate(value),\r\n            important: important,\r\n        });\r\n    }\r\n    return declarations;\r\n}\r\nfunction normalizeValue(value) {\r\n    var regex = /\\s+/gim;\r\n    value = value.replace(regex, ' ').trim();\r\n    var important = value.endsWith(IMPORTANT);\r\n    if (important) {\r\n        value = value.substr(0, value.length - IMPORTANT.length).trim();\r\n    }\r\n    return {\r\n        value: value,\r\n        important: important\r\n    };\r\n}\r\nfunction getActiveSelectors(hostEl, hostScopeMap, globalScopes) {\r\n    // computes the css scopes that might affect this particular element\r\n    // avoiding using spread arrays to avoid ts helper fns when in es5\r\n    var scopes = [];\r\n    var scopesForElement = getScopesForElement(hostScopeMap, hostEl);\r\n    // globalScopes are always took into account\r\n    globalScopes.forEach(function (s) { return scopes.push(s); });\r\n    // the parent scopes are computed by walking parent dom until <html> is reached\r\n    scopesForElement.forEach(function (s) { return scopes.push(s); });\r\n    // each scope might have an array of associated selectors\r\n    // let's flatten the complete array of selectors from all the scopes\r\n    var selectorSet = getSelectorsForScopes(scopes);\r\n    // we filter to only the selectors that matches the hostEl\r\n    var activeSelectors = selectorSet.filter(function (selector) { return matches(hostEl, selector.selector); });\r\n    // sort selectors by specifity\r\n    return sortSelectors(activeSelectors);\r\n}\r\nfunction getScopesForElement(hostTemplateMap, node) {\r\n    var scopes = [];\r\n    while (node) {\r\n        var scope = hostTemplateMap.get(node);\r\n        if (scope) {\r\n            scopes.push(scope);\r\n        }\r\n        node = node.parentElement;\r\n    }\r\n    return scopes;\r\n}\r\nfunction getSelectorsForScopes(scopes) {\r\n    var selectors = [];\r\n    scopes.forEach(function (scope) {\r\n        selectors.push.apply(selectors, scope.selectors);\r\n    });\r\n    return selectors;\r\n}\r\nfunction sortSelectors(selectors) {\r\n    selectors.sort(function (a, b) {\r\n        if (a.specificity === b.specificity) {\r\n            return a.nu - b.nu;\r\n        }\r\n        return a.specificity - b.specificity;\r\n    });\r\n    return selectors;\r\n}\r\nfunction matches(el, selector) {\r\n    return selector === ':root' || selector === 'html' || el.matches(selector);\r\n}\r\nfunction parseCSS(original) {\r\n    var ast = parse(original);\r\n    var template = compileTemplate(original);\r\n    var selectors = getSelectors(ast);\r\n    return {\r\n        original: original,\r\n        template: template,\r\n        selectors: selectors,\r\n        usesCssVars: template.length > 1\r\n    };\r\n}\r\nfunction addGlobalStyle(globalScopes, styleEl) {\r\n    if (globalScopes.some(function (css) { return css.styleEl === styleEl; })) {\r\n        return false;\r\n    }\r\n    var css = parseCSS(styleEl.textContent);\r\n    css.styleEl = styleEl;\r\n    globalScopes.push(css);\r\n    return true;\r\n}\r\nfunction updateGlobalScopes(scopes) {\r\n    var selectors = getSelectorsForScopes(scopes);\r\n    var props = resolveValues(selectors);\r\n    scopes.forEach(function (scope) {\r\n        if (scope.usesCssVars) {\r\n            scope.styleEl.textContent = executeTemplate(scope.template, props);\r\n        }\r\n    });\r\n}\r\nfunction reScope(scope, scopeId) {\r\n    var template = scope.template.map(function (segment) {\r\n        return (typeof segment === 'string')\r\n            ? replaceScope(segment, scope.scopeId, scopeId)\r\n            : segment;\r\n    });\r\n    var selectors = scope.selectors.map(function (sel) {\r\n        return Object.assign(Object.assign({}, sel), { selector: replaceScope(sel.selector, scope.scopeId, scopeId) });\r\n    });\r\n    return Object.assign(Object.assign({}, scope), { template: template,\r\n        selectors: selectors,\r\n        scopeId: scopeId });\r\n}\r\nfunction replaceScope(original, oldScopeId, newScopeId) {\r\n    original = replaceAll(original, \"\\\\.\" + oldScopeId, \".\" + newScopeId);\r\n    return original;\r\n}\r\nfunction replaceAll(input, find, replace) {\r\n    return input.replace(new RegExp(find, 'g'), replace);\r\n}\r\nfunction loadDocument(doc, globalScopes) {\r\n    loadDocumentStyles(doc, globalScopes);\r\n    return loadDocumentLinks(doc, globalScopes);\r\n}\r\nfunction startWatcher(doc, globalScopes) {\r\n    var mutation = new MutationObserver(function () {\r\n        if (loadDocumentStyles(doc, globalScopes)) {\r\n            updateGlobalScopes(globalScopes);\r\n        }\r\n    });\r\n    mutation.observe(document.head, { childList: true });\r\n}\r\nfunction loadDocumentLinks(doc, globalScopes) {\r\n    var promises = [];\r\n    var linkElms = doc.querySelectorAll('link[rel=\"stylesheet\"][href]:not([data-no-shim])');\r\n    for (var i = 0; i < linkElms.length; i++) {\r\n        promises.push(addGlobalLink(doc, globalScopes, linkElms[i]));\r\n    }\r\n    return Promise.all(promises);\r\n}\r\nfunction loadDocumentStyles(doc, globalScopes) {\r\n    var styleElms = Array.from(doc.querySelectorAll('style:not([data-styles]):not([data-no-shim])'));\r\n    return styleElms\r\n        .map(function (style) { return addGlobalStyle(globalScopes, style); })\r\n        .some(Boolean);\r\n}\r\nfunction addGlobalLink(doc, globalScopes, linkElm) {\r\n    var url = linkElm.href;\r\n    return fetch(url).then(function (rsp) { return rsp.text(); }).then(function (text) {\r\n        if (hasCssVariables(text) && linkElm.parentNode) {\r\n            if (hasRelativeUrls(text)) {\r\n                text = fixRelativeUrls(text, url);\r\n            }\r\n            var styleEl = doc.createElement('style');\r\n            styleEl.setAttribute('data-styles', '');\r\n            styleEl.textContent = text;\r\n            addGlobalStyle(globalScopes, styleEl);\r\n            linkElm.parentNode.insertBefore(styleEl, linkElm);\r\n            linkElm.remove();\r\n        }\r\n    }).catch(function (err) {\r\n        console.error(err);\r\n    });\r\n}\r\n// This regexp tries to determine when a variable is declared, for example:\r\n//\r\n// .my-el { --highlight-color: green; }\r\n//\r\n// but we don't want to trigger when a classname uses \"--\" or a pseudo-class is\r\n// used. We assume that the only characters that can preceed a variable\r\n// declaration are \"{\", from an opening block, \";\" from a preceeding rule, or a\r\n// space. This prevents the regexp from matching a word in a selector, since\r\n// they would need to start with a \".\" or \"#\". (We assume element names don't\r\n// start with \"--\").\r\nvar CSS_VARIABLE_REGEXP = /[\\s;{]--[-a-zA-Z0-9]+\\s*:/m;\r\nfunction hasCssVariables(css) {\r\n    return css.indexOf('var(') > -1 || CSS_VARIABLE_REGEXP.test(css);\r\n}\r\n// This regexp find all url() usages with relative urls\r\nvar CSS_URL_REGEXP = /url[\\s]*\\([\\s]*['\"]?(?!(?:https?|data)\\:|\\/)([^\\'\\\"\\)]*)[\\s]*['\"]?\\)[\\s]*/gim;\r\nfunction hasRelativeUrls(css) {\r\n    CSS_URL_REGEXP.lastIndex = 0;\r\n    return CSS_URL_REGEXP.test(css);\r\n}\r\nfunction fixRelativeUrls(css, originalUrl) {\r\n    // get the basepath from the original import url\r\n    var basePath = originalUrl.replace(/[^/]*$/, '');\r\n    // replace the relative url, with the new relative url\r\n    return css.replace(CSS_URL_REGEXP, function (fullMatch, url) {\r\n        // rhe new relative path is the base path + uri\r\n        // TODO: normalize relative URL\r\n        var relativeUrl = basePath + url;\r\n        return fullMatch.replace(url, relativeUrl);\r\n    });\r\n}\r\nvar CustomStyle = /** @class */ (function () {\r\n    function CustomStyle(win, doc) {\r\n        this.win = win;\r\n        this.doc = doc;\r\n        this.count = 0;\r\n        this.hostStyleMap = new WeakMap();\r\n        this.hostScopeMap = new WeakMap();\r\n        this.globalScopes = [];\r\n        this.scopesMap = new Map();\r\n        this.didInit = false;\r\n    }\r\n    CustomStyle.prototype.initShim = function () {\r\n        var _this = this;\r\n        if (this.didInit) {\r\n            return Promise.resolve();\r\n        }\r\n        else {\r\n            this.didInit = true;\r\n            return new Promise(function (resolve) {\r\n                _this.win.requestAnimationFrame(function () {\r\n                    startWatcher(_this.doc, _this.globalScopes);\r\n                    loadDocument(_this.doc, _this.globalScopes).then(function () { return resolve(); });\r\n                });\r\n            });\r\n        }\r\n    };\r\n    CustomStyle.prototype.addLink = function (linkEl) {\r\n        var _this = this;\r\n        return addGlobalLink(this.doc, this.globalScopes, linkEl).then(function () {\r\n            _this.updateGlobal();\r\n        });\r\n    };\r\n    CustomStyle.prototype.addGlobalStyle = function (styleEl) {\r\n        if (addGlobalStyle(this.globalScopes, styleEl)) {\r\n            this.updateGlobal();\r\n        }\r\n    };\r\n    CustomStyle.prototype.createHostStyle = function (hostEl, cssScopeId, cssText, isScoped) {\r\n        if (this.hostScopeMap.has(hostEl)) {\r\n            throw new Error('host style already created');\r\n        }\r\n        var baseScope = this.registerHostTemplate(cssText, cssScopeId, isScoped);\r\n        var styleEl = this.doc.createElement('style');\r\n        styleEl.setAttribute('data-no-shim', '');\r\n        if (!baseScope.usesCssVars) {\r\n            // This component does not use (read) css variables\r\n            styleEl.textContent = cssText;\r\n        }\r\n        else if (isScoped) {\r\n            // This component is dynamic: uses css var and is scoped\r\n            styleEl['s-sc'] = cssScopeId = baseScope.scopeId + \"-\" + this.count;\r\n            styleEl.textContent = '/*needs update*/';\r\n            this.hostStyleMap.set(hostEl, styleEl);\r\n            this.hostScopeMap.set(hostEl, reScope(baseScope, cssScopeId));\r\n            this.count++;\r\n        }\r\n        else {\r\n            // This component uses css vars, but it's no-encapsulation (global static)\r\n            baseScope.styleEl = styleEl;\r\n            if (!baseScope.usesCssVars) {\r\n                styleEl.textContent = executeTemplate(baseScope.template, {});\r\n            }\r\n            this.globalScopes.push(baseScope);\r\n            this.updateGlobal();\r\n            this.hostScopeMap.set(hostEl, baseScope);\r\n        }\r\n        return styleEl;\r\n    };\r\n    CustomStyle.prototype.removeHost = function (hostEl) {\r\n        var css = this.hostStyleMap.get(hostEl);\r\n        if (css) {\r\n            css.remove();\r\n        }\r\n        this.hostStyleMap.delete(hostEl);\r\n        this.hostScopeMap.delete(hostEl);\r\n    };\r\n    CustomStyle.prototype.updateHost = function (hostEl) {\r\n        var scope = this.hostScopeMap.get(hostEl);\r\n        if (scope && scope.usesCssVars && scope.isScoped) {\r\n            var styleEl = this.hostStyleMap.get(hostEl);\r\n            if (styleEl) {\r\n                var selectors = getActiveSelectors(hostEl, this.hostScopeMap, this.globalScopes);\r\n                var props = resolveValues(selectors);\r\n                styleEl.textContent = executeTemplate(scope.template, props);\r\n            }\r\n        }\r\n    };\r\n    CustomStyle.prototype.updateGlobal = function () {\r\n        updateGlobalScopes(this.globalScopes);\r\n    };\r\n    CustomStyle.prototype.registerHostTemplate = function (cssText, scopeId, isScoped) {\r\n        var scope = this.scopesMap.get(scopeId);\r\n        if (!scope) {\r\n            scope = parseCSS(cssText);\r\n            scope.scopeId = scopeId;\r\n            scope.isScoped = isScoped;\r\n            this.scopesMap.set(scopeId, scope);\r\n        }\r\n        return scope;\r\n    };\r\n    return CustomStyle;\r\n}());\r\nvar win = window;\r\nfunction needsShim() {\r\n    return !(win.CSS && win.CSS.supports && win.CSS.supports('color', 'var(--c)'));\r\n}\r\nif (!win.__stencil_cssshim && needsShim()) {\r\n    win.__stencil_cssshim = new CustomStyle(win, document);\r\n}\r\n"],"sourceRoot":"webpack:///"}