{"version":3,"sources":["./node_modules/@ionic/core/dist/esm/ion-radio_2-ios.entry.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6H;AAC/F;AAC6B;AACqB;;AAEhF;AACA;AACA,QAAQ,2DAAgB;AACxB,iCAAiC,iBAAiB;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2DAAW;AACnC,wBAAwB,2DAAW;AACnC,uBAAuB,2DAAW;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,wCAAwC;AACvD,qBAAqB,2DAAU;AAC/B;AACA,sBAAsB,8DAAa;AACnC;AACA;AACA;AACA,gBAAgB,2DAAC,CAAC,mDAAI,GAAG,8EAA8E,QAAQ,oEAAoE,EAAE,4DAAkB,WAAW,0BAA0B,4DAAW,6FAA6F,GAAG,EAAE,2DAAC,SAAS,sBAAsB,EAAE,2DAAC,SAAS,uBAAuB,IAAI,2DAAC,YAAY,iFAAiF;AAC9f;AACA,cAAc,QAAQ,2DAAU,OAAO;AACvC,2BAA2B;AAC3B;AACA;AACA;AACA,MAAM;AACN,wBAAwB,eAAe,0BAA0B,qBAAqB,kBAAkB,8BAA8B,sBAAsB,yBAAyB,sBAAsB,qBAAqB,iBAAiB,UAAU,uBAAuB,oBAAoB,YAAY,oBAAoB,aAAa,sBAAsB,mBAAmB,qBAAqB,uBAAuB,0BAA0B,mBAAmB,WAAW,YAAY,OAAO,OAAO,MAAM,cAAc,eAAe,aAAa,gBAAgB,kBAAkB,SAAS,uBAAuB,eAAe,wBAAwB,qBAAqB,gBAAgB,aAAa,iDAAiD,WAAW,YAAY,QAAQ,yBAAyB,SAAS,yBAAyB,8BAA8B,sBAAsB,MAAM,iDAAiD,WAAW,YAAY,6CAA6C,mCAAmC,+BAA+B,cAAc,6FAA6F,+BAA+B,kBAAkB,uBAAuB,uBAAuB,aAAa,UAAU,WAAW,mCAAmC,gCAAgC,wBAAwB,iBAAiB,mBAAmB,oBAAoB,mBAAmB,kCAAkC,uBAAuB,WAAW,sCAAsC,yCAAyC,UAAU,SAAS,cAAc,kBAAkB,WAAW,YAAY,iDAAiD,aAAa,WAAW,qHAAqH,WAAW,YAAY,WAAW,gBAAgB,iBAAiB,kBAAkB,eAAe,kBAAkB,cAAc,gBAAgB,6FAA6F,gBAAgB,kBAAkB,mBAAmB,0BAA0B,yBAAyB,wBAAwB,wBAAwB,4BAA4B,gBAAgB,kBAAkB,eAAe,kBAAkB,6FAA6F,4BAA4B,kBAAkB,mBAAmB,yBAAyB,wBAAwB,wBAAwB,wBAAwB,EAAE;AACvlF;AACA;;AAEA;AACA;AACA,QAAQ,2DAAgB;AACxB,iCAAiC,gBAAgB;AACjD,0BAA0B,aAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,2DAAW;AACpC;AACA;AACA,6BAA6B,QAAQ;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,2DAAC,CAAC,mDAAI,GAAG,oFAAoF,2DAAU,QAAQ;AAC/H;AACA,cAAc,QAAQ,2DAAU,OAAO;AACvC,2BAA2B;AAC3B;AACA,MAAM;AACN;AACA;;AAE6D","file":"45-es2015.js","sourcesContent":["import { r as registerInstance, d as createEvent, c as getIonMode, h, H as Host, e as getElement } from './core-80bde1aa.js';\r\nimport './config-3c7f3790.js';\r\nimport { f as findItemLabel } from './helpers-46f4a262.js';\r\nimport { c as createColorClasses, h as hostContext } from './theme-18cbe2cc.js';\r\n\r\nconst Radio = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.inputId = `ion-rb-${radioButtonIds++}`;\r\n        this.radioGroup = null;\r\n        /**\r\n         * If `true`, the radio is selected.\r\n         */\r\n        this.checked = false;\r\n        /**\r\n         * The name of the control, which is submitted with the form data.\r\n         */\r\n        this.name = this.inputId;\r\n        /**\r\n         * If `true`, the user cannot interact with the radio.\r\n         */\r\n        this.disabled = false;\r\n        this.updateState = () => {\r\n            if (this.radioGroup) {\r\n                this.checked = this.radioGroup.value === this.value;\r\n            }\r\n        };\r\n        this.onFocus = () => {\r\n            this.ionFocus.emit();\r\n        };\r\n        this.onBlur = () => {\r\n            this.ionBlur.emit();\r\n        };\r\n        this.ionStyle = createEvent(this, \"ionStyle\", 7);\r\n        this.ionFocus = createEvent(this, \"ionFocus\", 7);\r\n        this.ionBlur = createEvent(this, \"ionBlur\", 7);\r\n    }\r\n    connectedCallback() {\r\n        if (this.value === undefined) {\r\n            this.value = this.inputId;\r\n        }\r\n        const radioGroup = this.radioGroup = this.el.closest('ion-radio-group');\r\n        if (radioGroup) {\r\n            this.updateState();\r\n            radioGroup.addEventListener('ionChange', this.updateState);\r\n        }\r\n    }\r\n    disconnectedCallback() {\r\n        const radioGroup = this.radioGroup;\r\n        if (radioGroup) {\r\n            radioGroup.removeEventListener('ionChange', this.updateState);\r\n            this.radioGroup = null;\r\n        }\r\n    }\r\n    componentWillLoad() {\r\n        this.emitStyle();\r\n    }\r\n    emitStyle() {\r\n        this.ionStyle.emit({\r\n            'radio-checked': this.checked,\r\n            'interactive-disabled': this.disabled,\r\n        });\r\n    }\r\n    render() {\r\n        const { inputId, disabled, checked, color, el } = this;\r\n        const mode = getIonMode(this);\r\n        const labelId = inputId + '-lbl';\r\n        const label = findItemLabel(el);\r\n        if (label) {\r\n            label.id = labelId;\r\n        }\r\n        return (h(Host, { role: \"radio\", \"aria-disabled\": disabled ? 'true' : null, \"aria-checked\": `${checked}`, \"aria-labelledby\": labelId, class: Object.assign(Object.assign({}, createColorClasses(color)), { [mode]: true, 'in-item': hostContext('ion-item', el), 'interactive': true, 'radio-checked': checked, 'radio-disabled': disabled }) }, h(\"div\", { class: \"radio-icon\" }, h(\"div\", { class: \"radio-inner\" })), h(\"button\", { type: \"button\", onFocus: this.onFocus, onBlur: this.onBlur, disabled: disabled })));\r\n    }\r\n    get el() { return getElement(this); }\r\n    static get watchers() { return {\r\n        \"color\": [\"emitStyle\"],\r\n        \"checked\": [\"emitStyle\"],\r\n        \"disabled\": [\"emitStyle\"]\r\n    }; }\r\n    static get style() { return \":host{--inner-border-radius:50%;display:inline-block;position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:2}:host(.radio-disabled){pointer-events:none}.radio-icon{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;contain:layout size style}.radio-icon,button{width:100%;height:100%}button{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none}:host-context([dir=rtl]) button,[dir=rtl] button{left:unset;right:unset;right:0}button::-moz-focus-inner{border:0}.radio-icon,.radio-inner{-webkit-box-sizing:border-box;box-sizing:border-box}:host{--color-checked:var(--ion-color-primary,#3880ff);width:15px;height:24px}:host(.ion-color.radio-checked) .radio-inner{border-color:var(--ion-color-base)}.item-radio.item-ios ion-label{margin-left:0}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.item-radio.item-ios ion-label{margin-left:unset;-webkit-margin-start:0;margin-inline-start:0}}.radio-inner{width:33%;height:50%}:host(.radio-checked) .radio-inner{-webkit-transform:rotate(45deg);transform:rotate(45deg);border-width:2px;border-top-width:0;border-left-width:0;border-style:solid;border-color:var(--color-checked)}:host(.radio-disabled){opacity:.3}:host(.ion-focused) .radio-icon:after{border-radius:var(--inner-border-radius);left:-9px;top:-8px;display:block;position:absolute;width:36px;height:36px;background:var(--ion-color-primary-tint,#4c8dff);content:\\\"\\\";opacity:.2}:host-context([dir=rtl]).ion-focused .radio-icon:after,:host-context([dir=rtl]):host(.ion-focused) .radio-icon:after{left:unset;right:unset;right:-9px}:host(.in-item){margin-left:10px;margin-right:11px;margin-top:8px;margin-bottom:8px;display:block;position:static}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){:host(.in-item){margin-left:unset;margin-right:unset;-webkit-margin-start:10px;margin-inline-start:10px;-webkit-margin-end:11px;margin-inline-end:11px}}:host(.in-item[slot=start]){margin-left:3px;margin-right:21px;margin-top:8px;margin-bottom:8px}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){:host(.in-item[slot=start]){margin-left:unset;margin-right:unset;-webkit-margin-start:3px;margin-inline-start:3px;-webkit-margin-end:21px;margin-inline-end:21px}}\"; }\r\n};\r\nlet radioButtonIds = 0;\r\n\r\nconst RadioGroup = class {\r\n    constructor(hostRef) {\r\n        registerInstance(this, hostRef);\r\n        this.inputId = `ion-rg-${radioGroupIds++}`;\r\n        this.labelId = `${this.inputId}-lbl`;\r\n        /**\r\n         * If `true`, the radios can be deselected.\r\n         */\r\n        this.allowEmptySelection = false;\r\n        /**\r\n         * The name of the control, which is submitted with the form data.\r\n         */\r\n        this.name = this.inputId;\r\n        this.onClick = (ev) => {\r\n            const selectedRadio = ev.target && ev.target.closest('ion-radio');\r\n            if (selectedRadio) {\r\n                const currentValue = this.value;\r\n                const newValue = selectedRadio.value;\r\n                if (newValue !== currentValue) {\r\n                    this.value = newValue;\r\n                }\r\n                else if (this.allowEmptySelection) {\r\n                    this.value = undefined;\r\n                }\r\n            }\r\n        };\r\n        this.ionChange = createEvent(this, \"ionChange\", 7);\r\n    }\r\n    valueChanged(value) {\r\n        this.ionChange.emit({ value });\r\n    }\r\n    async connectedCallback() {\r\n        // Get the list header if it exists and set the id\r\n        // this is used to set aria-labelledby\r\n        const el = this.el;\r\n        const header = el.querySelector('ion-list-header') || el.querySelector('ion-item-divider');\r\n        if (header) {\r\n            const label = header.querySelector('ion-label');\r\n            if (label) {\r\n                this.labelId = label.id = this.name + '-lbl';\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return (h(Host, { role: \"radiogroup\", \"aria-labelledby\": this.labelId, onClick: this.onClick, class: getIonMode(this) }));\r\n    }\r\n    get el() { return getElement(this); }\r\n    static get watchers() { return {\r\n        \"value\": [\"valueChanged\"]\r\n    }; }\r\n};\r\nlet radioGroupIds = 0;\r\n\r\nexport { Radio as ion_radio, RadioGroup as ion_radio_group };\r\n"],"sourceRoot":"webpack:///"}